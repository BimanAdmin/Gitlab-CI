stages:
  - fetch_code
  - install_dependencies
  - pulumi_up
  - post_pipeline

variables:
  AWS_REGION: 'us-east-1'
  AWS_ACCESS_KEY_ID: '$(AWS_ACCESS_KEY_ID)'
  AWS_SECRET_ACCESS_KEY: '$(AWS_SECRET_ACCESS_KEY)'
  AWS_CREDENTIALS_ID: '$(AWS_CREDENTIALS_ID)'
  PULUMI_STACK: 'ec2automation-s3-gitlab'
  GITHUB_REPO_URL: 'https://gitlab.com/gitlab-cicd6911650/pulumi-automation.git'
  PULUMI_STATE_BUCKET: 'sandbox-pulumi-state-gitlab' # Set your Pulumi state bucket URL AWS_CREDENTIALS_ID
  PATH: "/var/lib/jenkins/.pulumi/bin:$PATH" # Installation Path for Pulumi on Jenkins ec2 machine
  npm_PATH: "/usr/share/npm:$npm_PATH"
  PULUMI_CONFIG_PASSPHRASE: '$(PULUMI_CONFIG_PASSPHRASE)'
  PULUMI_ACCESS_TOKEN: '$(PULUMI_ACCESS_TOKEN)'
  NODE_VERSION: '14'

before_script:
  - apt-get update -qy
  - apt-get install -y curl

# fetch_code:
#   stage: fetch_code
#   script:
#     - echo 'Fetching code from GitHub'
#     - git clone -b master $GITHUB_REPO_URL
#   tags: 
#     - test

install_dependencies:
  stage: install_dependencies
  tags: 
    - test
  script:
    - apt-get install -y mkdir
    - curl -fsSL https://get.pulumi.com | sh
    - export PATH=$PATH:/var/lib/jenkins/.pulumi/bin
    
  

# pulumi_preview:
#   stage: pulumi_preview
#   script:
#     - echo 'Running Pulumi Preview'
#     - pulumi preview --json > pulumi-preview-output.json
#     - pulumi stack export > pulumi-current-state.json
#     - aws s3 cp pulumi-current-state.json s3://${PULUMI_STATE_BUCKET}/pulumi-current-state.json
#     # Add logic to filter changes as per the Jenkins pipeline code
#     - cat pulumi-preview-output.json

pulumi_up:
  stage: pulumi_up
  script:
    - echo 'Running Pulumi Up'
    - echo '#!/bin/bash' > pulumi-up.sh
    - echo 'pulumi up --yes' >> pulumi-up.sh
    - chmod +x pulumi-up.sh
    - export AWS_ACCESS_KEY_ID=$(cat $AWS_ACCESS_KEY_ID_FILE)
    - export AWS_SECRET_ACCESS_KEY=$(cat $AWS_SECRET_ACCESS_KEY_FILE)
    - pulumi login s3://sandbox-pulumi-state-new?region=us-east-1
    - stackList=$(pulumi stack ls --json | tr -d '\n')
    - stackExists=$(echo "$stackList" | grep -q "$PULUMI_STACK" && echo true || echo false)
    - if [ "$stackExists" == "false" ]; then pulumi stack init $PULUMI_STACK; else pulumi stack select $PULUMI_STACK; fi
    - curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -
    - sudo apt-get install -y nodejs
    - sudo apt update
    - npm install
    - node -v
    - npm -v
    - npm install @pulumi/pulumi && npm install @pulumi/aws && npm install @pulumi/gitlab
    - export PULUMI_CONFIG_PASSPHRASE="$PULUMI_CONFIG_PASSPHRASE"
    - ./pulumi-up.sh
  tags: 
    - test

post_pipeline:
  stage: post_pipeline
  script:
    - echo 'Post-pipeline actions'
    - if [ "$CI_COMMIT_RESULT" != "success" ]; then pulumi destroy --yes; fi
