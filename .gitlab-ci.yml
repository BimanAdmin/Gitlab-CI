stages:
  - install_dependencies
  - pulumi_up

variables:
  AWS_REGION: 'us-east-1'
  PULUMI_PATH: "/usr/bin/bash"
  PULUMI_STACK: 'ec2automation-s3-gitlab'
  GITHUB_REPO_URL: 'https://gitlab.com/gitlab-cicd6911650/pulumi-automation.git'
  PULUMI_STATE_BUCKET: 'sandbox-pulumi-state-gitlab' # Set your Pulumi state bucket URL AWS_CREDENTIALS_ID
  npm_PATH: "/usr/share/npm:$npm_PATH"
  NODE_VERSION: '14'

before_script:
  - export AWS_ACCESS_KEY_ID=$(cat $AWS_ACCESS_KEY_ID)
  - export AWS_SECRET_ACCESS_KEY=$(cat $AWS_SECRET_ACCESS_KEY)
  - export PULUMI_CONFIG_PASSPHRASE=$(cat $PULUMI_CONFIG_PASSPHRASE)
  - export PULUMI_ACCESS_TOKEN=$(cat $PULUMI_ACCESS_TOKEN)

# fetch_code:
#   stage: fetch_code
#   script:
#     - echo 'Fetching code from GitHub'
#     - git clone -b master $GITHUB_REPO_URL
#   tags: 
#     - test

install_dependencies:
  stage: install_dependencies
  script:
    - export PATH="/bin:/usr/bin:/usr/local/bin:$PATH"
    - curl -fsSL https://get.pulumi.com | sh
    - export PATH="$PULUMI_PATH:$PATH"
  tags: 
    - test
  

# pulumi_preview:
#   stage: pulumi_preview
#   script:
#     - echo 'Running Pulumi Preview'
#     - pulumi preview --json > pulumi-preview-output.json
#     - pulumi stack export > pulumi-current-state.json
#     - aws s3 cp pulumi-current-state.json s3://${PULUMI_STATE_BUCKET}/pulumi-current-state.json
#     # Add logic to filter changes as per the Jenkins pipeline code
#     - cat pulumi-preview-output.json

pulumi_up:
  stage: pulumi_up
  script:
    - |
      # Create a script file for Pulumi up command
      cat <<EOF > pulumi-up.sh
      #!/bin/bash
      pulumi up --yes
      EOF
    - chmod +x pulumi-up.sh
    - |
      # Execute Pulumi up
      pulumi login s3://${PULUMI_STATE_BUCKET}/${PULUMI_STACK}
      export PATH="/var/lib/jenkins/.pulumi/bin:$PATH"
      export npm_PATH="/usr/share/npm:$npm_PATH"
      npm install
      npm install @pulumi/pulumi && npm install @pulumi/aws
      stackList=$(pulumi stack ls --json | tr -d '[:space:]')
      if [[ $stackList != *$PULUMI_STACK* ]]; then
        pulumi stack init $PULUMI_STACK
      else
        pulumi stack select $PULUMI_STACK
      fi
      export PULUMI_CONFIG_PASSPHRASE="$PULUMI_CONFIG_PASSPHRASE"
      ./pulumi-up.sh

# after_script:
#     - echo 'Cleaning up'
#     - pulumi destroy --yes

#   when: always